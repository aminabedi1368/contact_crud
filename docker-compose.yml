version: '3.5'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}
volumes:
  postgres:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  caddy:
    driver: ${VOLUMES_DRIVER}

services:

### PostgreSQL ###########################################
    # postgres:
    #   build:
    #     context: ./postgres
    #     args:
    #       - POSTGRES_VERSION=${POSTGRES_VERSION}
    #   volumes:
    #     - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
    #     - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    #   ports:
    #     - "${POSTGRES_PORT}:5432"
    #   environment:
    #     - POSTGRES_DB=${POSTGRES_DB}
    #     - POSTGRES_USER=${POSTGRES_USER}
    #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #   networks:
    #     - backend
    #     - frontend

### PostgreSQL PostGis ###################################
    postgres:
      build:
        context: ./DockerFile/postgres-postgis
        args:
          - POSTGIS_VERSION=${POSTGIS_VERSION}
          - INSTALL_PGSQL_HTTP_FOR_POSTGIS13=${POSTGIS_INSTALL_PGSQL_HTTP_FOR_POSTGIS13}
      volumes:
        - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
        - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d

      # ports:
      #   - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      networks:
        - frontend
        - backend

###### postgrest ##############
       
    postgrest:
      image: postgrest/postgrest
      # ports:
      #   - "${POSTGREST_PORT}:3000"
      environment:
        PGRST_DB_URI: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
        # PGRST_DB_URI: postgres://app_user:password@db:5432/app_db
        PGRST_OPENAPI_SERVER_PROXY_URI: http://${SERVER_IP}:${POSTGREST_PORT}
        PGRST_DB_ANON_ROLE: ${POSTGRES_USER}

      depends_on:
        - postgres
      restart: always
      networks:
       - frontend
       - backend

###### swagger ##############

    swagger:
      image: swaggerapi/swagger-ui
      ports:
        - "8085:8080"
      expose:
        - "8080"
      environment:
        API_URL: http://${SERVER_IP}:${POSTGREST_PORT}
      restart: always
      networks:
       - frontend
       - backend

### pgAdmin ##############################################
    pgadmin:
      image: dpage/pgadmin4:latest
      environment:
        - "PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}"
        - "PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}"
      ports:
        - "${PGADMIN_PORT}:80"
      volumes:
        - ${DATA_PATH_HOST}/pgadmin:/var/lib/pgadmin
      depends_on:
        - postgres
      networks:
        - frontend

### Caddy Server #########################################
    caddy:
      build: ./DockerFile/caddy
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
        - ${CADDY_CONFIG_PATH}:/etc/caddy
        - ${CADDY_HOST_LOG_PATH}:/var/log/caddy
        - ${DATA_PATH_HOST}:/root/.caddy

      ports:
        - "${CADDY_HOST_HTTP_PORT}:80"
        - "${CADDY_HOST_HTTPS_PORT}:443"
      restart: always
      networks:
        - frontend
        - backend

### burency_backend #########################################
    backend:
      container_name: burency_backend
      restart: always
      build: ./backend
      volumes:
        - ./backend:/home/node/app/
      # ports:
      #   - "4040:4000"
      networks:
        - frontend
        - backend